import streamlit as st
import pandas as pd
import pickle
import requests
import os
import streamlit.components.v1 as components

# ‚úÖ Set TMDB API key
api_key = os.getenv("TMDB_API_KEY", "c7ec19ffdd3279641fb606d19ceb9bb1")

# ‚úÖ Helper: Fetch poster from TMDB
def fetch_poster(movie_id):
    try:
        url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={api_key}&language=en-US"
        data = requests.get(url).json()
        poster_path = data.get("poster_path")
        return f"https://image.tmdb.org/t/p/w500/{poster_path}" if poster_path else "https://via.placeholder.com/300x450?text=No+Image"
    except Exception:
        return "https://via.placeholder.com/300x450?text=Error"

# ‚úÖ Helper: Fetch movie details
def fetch_movie_info(movie_id):
    try:
        url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={api_key}&language=en-US"
        data = requests.get(url).json()
        overview = data.get("overview", "No overview available.")
        release_date = data.get("release_date", "Unknown")
        genres = ", ".join([g["name"] for g in data.get("genres", [])])
        return overview, release_date, genres
    except Exception:
        return "No overview available.", "Unknown", "Unknown"

# ‚úÖ Page Configuration
st.set_page_config(page_title="üé¨ Movie Recommender", layout="wide")

# ‚úÖ Global CSS Styling with Enhanced Navbar Design
st.markdown("""
    <style>
    body {
        background-image: url('https://images.unsplash.com/photo-1517602302552-471fe67acf66?auto=format&fit=crop&w=1920&q=80');
        background-size: cover;
        background-attachment: fixed;
        background-position: center;
    }

    .stApp {
        background-color: rgba(255, 255, 255, 0.85);
        padding: 20px;
        border-radius: 12px;
    }

    .movie-card {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        padding: 15px;
        text-align: center;
        margin-bottom: 20px;
        transition: transform 0.3s, box-shadow 0.3s;
    }
    .movie-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
    }
    .movie-card img {
        border-radius: 8px;
        max-height: 400px;
        object-fit: cover;
        width: 100%;
    }
    .movie-title {
        font-size: 1.2em;
        font-weight: bold;
        margin-top: 10px;
        color: #333;
    }
    .movie-overview {
        font-size: 0.85em;
        color: #666;
        margin-top: 10px;
        text-align: justify;
    }
    .white-box {
        background: linear-gradient(135deg, #ffffff, #f2f2f2);
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        margin-top: 20px;
    }

    .navbar {
        display: flex;
        justify-content: center;
        gap: 40px;
        background: linear-gradient(90deg, #ff8a00, #e52e71);
        padding: 15px 30px;
        border-radius: 20px;
        margin-bottom: 30px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        font-family: 'Arial', sans-serif;
    }
    .navbar button {
        color: white;
        font-weight: 600;
        padding: 12px 25px;
        border: none;
        border-radius: 12px;
        background: transparent;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1.1em;
        letter-spacing: 1px;
    }
    .navbar button:hover {
        background-color: rgba(255,255,255,0.2);
        transform: scale(1.05);
    }
    .navbar .nav-active {
        background-color: white !important;
        color: #e52e71 !important;
        box-shadow: 0 0 12px rgba(255,255,255,0.6);
    }

    .about-background {
        background-image: url('https://images.unsplash.com/photo-1547689795-3feff6593a32');
        background-size: cover;
        background-position: center;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .about-content {
        background-color: rgba(0, 0, 0, 0.7);
        padding: 40px;
        border-radius: 15px;
        color: white;
        max-width: 800px;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    }
    </style>
""", unsafe_allow_html=True)

# ‚úÖ Navbar Logic
if "nav" not in st.session_state:
    st.session_state.nav = "Home"

st.markdown('<div class="navbar">', unsafe_allow_html=True)
col1, col2, col3 = st.columns([1, 1, 1])
with col1:
    if st.button("üè† Home", key="nav_home"):
        st.session_state.nav = "Home"
with col2:
    if st.button("‚ÑπÔ∏è About", key="nav_about"):
        st.session_state.nav = "About"
with col3:
    if st.button("üîê Login", key="nav_login"):
        st.session_state.nav = "Login"
st.markdown('</div>', unsafe_allow_html=True)

# JavaScript to highlight active button
st.markdown(f"""
    <script>
    const btns = window.parent.document.querySelectorAll('button');
    btns.forEach(btn => {{
        if (btn.innerText.includes('{st.session_state.nav}')) {{
            btn.classList.add('nav-active');
        }}
    }});
    </script>
""", unsafe_allow_html=True)

# ‚úÖ Page Routing
page = st.session_state.nav

if page == "Home":
    st.title("üé¨ Movie Recommender System")

    # ‚úÖ Hero Banner
    st.markdown("""
        <div style="
            background: linear-gradient(90deg, #ff8a00, #e52e71);
            padding: 40px 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            text-align: center;
            color: white;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        ">
            <h1 style="margin-bottom: 10px;">üçø Welcome to the Ultimate Movie Recommender üé•</h1>
            <p style="font-size: 1.1em; margin: 0;">Discover movies you‚Äôll love based on your favorite picks!</p>
        </div>
    """, unsafe_allow_html=True)

    # ‚úÖ Featured Movies
    st.subheader("üåü Featured Movies")
    sample_movie_ids = [1632, 299536, 17455, 2830, 429422, 157336, 603, 24428, 680]
    image_urls = [fetch_poster(mid) for mid in sample_movie_ids]

    try:
        imageCarouselComponent = components.declare_component("image-carousel-component", path="frontend/frontend/public")
        imageCarouselComponent(imageUrls=image_urls, height=200, key="carousel")
    except Exception:
        st.markdown("<div class='white-box'>", unsafe_allow_html=True)
        cols = st.columns(3)
        for i, url in enumerate(image_urls):
            with cols[i % 3]:
                st.markdown(f'<div class="movie-card">', unsafe_allow_html=True)
                st.image(url, use_container_width=True)
                st.markdown(f'<p class="movie-title">Featured Movie {i + 1}</p>', unsafe_allow_html=True)
                st.markdown(f"</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

    # ‚úÖ Load Data
    try:
        movies = pd.read_csv("dataset.csv")
        with open("similarity.pkl", "rb") as f:
            similarity = pickle.load(f)
    except Exception as e:
        st.error(f"üö® Data loading error: {e}")
        st.stop()

    if similarity.shape[0] != len(movies) or 'title' not in movies.columns or 'id' not in movies.columns:
        st.error("‚ùå Dataset and similarity matrix mismatch or missing columns.")
        st.stop()

    # ‚úÖ Movie Recommendation
    st.subheader("üé• Select a Movie You Like")
    selected_movie = st.selectbox("Choose a movie to get similar recommendations", sorted(movies['title'].values))
    trigger_recommend = st.button("üéØ Show Recommendations")

    def recommend(movie_title):
        try:
            movie_title_clean = movie_title.strip().lower()
            match = movies[movies['title'].str.strip().str.lower() == movie_title_clean]
            if match.empty:
                return [], [], [], [], [], []
            movie_idx = match.index[0]
            distances = list(enumerate(similarity[movie_idx]))
            sorted_movies = sorted(
                [(i, score) for i, score in distances if i != movie_idx and score > 0],
                key=lambda x: x[1],
                reverse=True
            )[:10]
            titles, posters, overviews, dates, genres_list, ids = [], [], [], [], [], []
            for idx, _ in sorted_movies:
                movie_id = int(movies.iloc[idx]['id'])
                title = movies.iloc[idx]['title']
                overview, release_date, genres = fetch_movie_info(movie_id)
                titles.append(title)
                posters.append(fetch_poster(movie_id))
                overviews.append(overview)
                dates.append(release_date)
                genres_list.append(genres)
                ids.append(movie_id)
            return titles, posters, overviews, dates, genres_list, ids
        except Exception as e:
            st.error(f"üö® Recommendation error: {e}")
            return [], [], [], [], [], []

    if trigger_recommend:
        with st.spinner("üîç Fetching recommendations..."):
            titles, posters, overviews, release_dates, genres_list, movie_ids = recommend(selected_movie)
        if titles:
            st.subheader("üéØ Top Recommendations")
            cols = st.columns(5)
            for i in range(10):
                with cols[i % 5]:
                    st.markdown(f'<div class="movie-card">', unsafe_allow_html=True)
                    st.image(posters[i], use_container_width=True)
                    st.markdown(f'<p class="movie-title"><a href="https://www.themoviedb.org/movie/{movie_ids[i]}" target="_blank" style="text-decoration: none; color: #FF4081;">{titles[i]}</a></p>', unsafe_allow_html=True)
                    st.caption(f"üóìÔ∏è {release_dates[i]} | üé≠ {genres_list[i]}")
                    st.markdown(f"<p class='movie-overview'>{overviews[i]}</p>", unsafe_allow_html=True)
                    st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.warning("‚ùå No similar movies found. Try another one!")

elif page == "About":
    st.title("‚ÑπÔ∏è About")
    
    # Apply background image specifically for About page
    st.markdown('<div class="about-background">', unsafe_allow_html=True)
    st.markdown('<div class="about-content">', unsafe_allow_html=True)
    st.markdown("""
        Welcome to the **Ultimate Movie Recommender**! üé•  
        - Get movie suggestions powered by **TMDB** and collaborative filtering  
        - Built with **Streamlit** and ‚ù§Ô∏è for film lovers  
        - Discover, explore, and enjoy!
    """)
    st.markdown('</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

elif page == "Login":
    st.title("üîê Login")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if username and password:
            st.success(f"‚úÖ Welcome back, {username}!")
        else:
            st.warning("‚ö†Ô∏è Please enter both username and password.")
